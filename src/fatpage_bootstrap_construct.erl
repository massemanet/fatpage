%%% This file was generated by fatpage from src/fatpage_construct.abnf.
%%% It happened on 2022-12-28, at 15:51:14. It was a Wednesday.
%%% You should probably not modify it.

-module(fatpage_bootstrap_construct).

-export([string/1]).

string(String) -> string(String, fun '-term-'/1).

'-term-'(Obj) ->
    alternative([fun '-ternary-'/1,
                 fun '-list-'/1,
                 fun '-cons-'/1,
                 fun '-tuple-'/1,
                 fun '-avar-'/1,
                 fun '-string-'/1,
                 fun '-number-'/1],
                Obj).

'-list-'(Obj) ->
    case sequence([fun '--virtual-0--'/1,
                   fun (O) -> final(<<91>>, O) end,
                   fun '--virtual-0--'/1,
                   fun '--virtual-1--'/1,
                   fun '--virtual-0--'/1,
                   fun (O) -> final(<<93>>, O) end],
                  Obj) of
        {ok, [_, _, _, Y4, _, _], O} -> {ok, {list, Y4}, O};
        Err -> Err
    end.

'--virtual-0--'(Obj) ->
    repeat(0, inf, fun '-WS-'/1, Obj).

'--virtual-1--'(Obj) ->
    repeat(0, 1, fun '-terms-'/1, Obj).

'-cons-'(Obj) ->
    case sequence([fun '--virtual-0--'/1,
                   fun (O) -> final(<<91>>, O) end,
                   fun '--virtual-0--'/1,
                   fun '-terms-'/1,
                   fun '--virtual-0--'/1,
                   fun (O) -> final(<<124>>, O) end,
                   fun '--virtual-0--'/1,
                   fun '-term-'/1,
                   fun '--virtual-0--'/1,
                   fun (O) -> final(<<93>>, O) end],
             Obj) of
        {ok, [_, _, _, Y4, _, _, _, Y8, _, _], O} -> {ok, {cons, Y4, Y8}, O};
        Err -> Err
    end.

'-tuple-'(Obj) ->
    case sequence([fun '--virtual-0--'/1,
                   fun (O) -> final(<<123>>, O) end,
                   fun '--virtual-0--'/1,
                   fun '--virtual-1--'/1,
                   fun '--virtual-0--'/1,
                   fun (O) -> final(<<125>>, O) end],
                  Obj) of
        {ok, [_, _, _, Y4, _, _], O} -> {ok, {tuple, Y4}, O};
        Err -> Err
    end.

'-string-'(Obj) ->
    case sequence([fun '-ALPHA-'/1,
                   fun '--virtual-2--'/1],
                  Obj) of
        {ok, Y, O} -> {ok, squeeze(Y), O};
        Err -> Err
    end.

'--virtual-2--'(Obj) ->
    repeat(0, inf, fun '--virtual-3--'/1, Obj).

'--virtual-3--'(Obj) ->
    alternative([fun '-ALPHA-'/1,
                 fun '-DIGIT-'/1,
                 fun (O) -> final(<<45>>, O) end,
                 fun (O) -> final(<<95>>, O) end],
                Obj).

'-ternary-'(Obj) ->
    case sequence([fun '--virtual-0--'/1,
                   fun '-cond-'/1,
                   fun '--virtual-0--'/1,
                   fun (O) -> final(<<63>>, O) end,
                   fun '--virtual-0--'/1,
                   fun '-term-'/1,
                   fun '--virtual-0--'/1,
                   fun (O) -> final(<<58>>, O) end,
                   fun '--virtual-0--'/1,
                   fun '-term-'/1],
             Obj) of
        {ok, [_, Y2, _, _, _, Y6, _, _, _, Y10], O} -> {ok, {ternary, Y2, Y6, Y10}, O};
        Err -> Err
    end.

'-terms-'(Obj) ->
    case sequence([fun '--virtual-0--'/1,
                   fun '-term-'/1,
                   fun '--virtual-0--'/1,
                   fun '--virtual-4--'/1],
                  Obj) of
        {ok, [_, Y2, _, Y4], O} -> {ok, [Y2|Y4], O};
        Err -> Err
    end.

'--virtual-4--'(Obj) ->
    repeat(0, inf, fun '-cterm-'/1, Obj).

'-cterm-'(Obj) ->
    case sequence([fun '--virtual-0--'/1,
                   fun (O) -> final(<<44>>, O) end,
                   fun '--virtual-0--'/1,
                   fun '-term-'/1],
                  Obj) of
        {ok, [_, _, _, Y4], O} -> {ok, Y4, O};
        Err -> Err
    end.

'-cond-'(Obj) ->
    case sequence([fun '-var-'/1,
                   fun '--virtual-0--'/1,
                   fun '-op-'/1,
                   fun '--virtual-0--'/1,
                   fun '-term-'/1],
                  Obj) of
        {ok, [Y1, _, Y3, _, Y5], O} -> {ok, {op, Y3, Y1, Y5}, O};
        Err -> Err
    end.

'-avar-'(Obj) ->
    case sequence([fun '--virtual-0--'/1,
                   fun '--virtual-6--'/1],
                  Obj) of
        {ok, [_, Y2], O} -> {ok, Y2, O};
        Err -> Err
    end.

'--virtual-6--'(Obj) ->
    alternative([fun '-var-'/1,
                 fun '-atom-var-'/1,
                 fun '-str-var-'/1],
                Obj).

'-atom-var-'(Obj) ->
    case sequence([fun (O) -> final(<<39, 89>>, O) end,
                   fun '--virtual-5--'/1,
                   fun (O) -> final(<<39>>, O) end], Obj) of
        {ok, [_, Y2, _], O} -> {ok, {atom_var, Y2}, O};
        Err -> Err
    end.

'-str-var-'(Obj) ->
    case sequence([fun (O) -> final(<<34, 89>>, O) end,
                   fun '--virtual-5--'/1,
                   fun (O) -> final(<<34>>, O) end], Obj) of
        {ok, [_, Y2, _], O} -> {ok, {str_var, Y2}, O};
        Err -> Err
    end.

'-var-'(Obj) ->
    case sequence([fun (O) -> final(<<89>>, O) end,
                   fun '--virtual-5--'/1], Obj) of
        {ok, Y, O} -> {ok, {var, atomize(Y)}, O};
        Err -> Err
    end.

'--virtual-5--'(Obj) ->
    repeat(0, inf, fun '-DIGIT-'/1, Obj).

'-op-'(Obj) ->
    case alternative([fun (O) -> final(<<61, 61>>, O) end,
                      fun (O) -> final(<<33, 61>>, O) end,
                      fun (O) -> final(<<60>>, O) end,
                      fun (O) -> final(<<62>>, O) end,
                      fun (O) -> final(<<61, 60>>, O) end,
                      fun (O) -> final(<<62, 61>>, O) end],
                     Obj) of
        {ok, Y, O} -> {ok, atomize(Y), O};
        Err -> Err
    end.

'-number-'(Obj) ->
    repeat(1, inf, fun '-DIGIT-'/1, Obj).

-record(obj, {ptr, bin, sz}).

string(L, F) when is_list(L) -> string(list_to_binary(L), F);
string(B, _) when not is_binary(B) -> error({badarg, not_a_string});
string(B, F) ->
    Obj = #obj{ptr = 0, bin = B, sz = byte_size(B)},
    case F(Obj) of
        {ok, Xs, O} when O#obj.ptr =:= eof -> {ok, Xs, eof};
        {ok, Xs, O} when O#obj.sz =:= O#obj.ptr -> {ok, Xs, 0};
        {ok, Xs, O} -> {ok, Xs, O#obj.sz - O#obj.ptr};
        {error, R} -> {error, R}
    end.

'-WS-'(Obj) ->
    case peek_chars(Obj, 1) of
        {C, 1} when <<$ >> =:= C; <<$\t>> =:= C -> {ok, C, bump_ptr(Obj, 1)};
        {C, 1} -> {error, {miss, ws, C}};
        Err -> Err
    end.

'-ALPHA-'(Obj) ->
    case peek_chars(Obj, 1) of
        {C, 1} when <<$A>> =< C, C =< <<$Z>>;
                    <<$a>> =< C, C =< <<$z>> -> {ok, C, bump_ptr(Obj, 1)};
        {C, 1} -> {error, {miss, alpha, C}};
        Err -> Err
    end.

'-DIGIT-'(Obj) ->
    case peek_chars(Obj, 1) of
        {C, 1} when <<$0>> =< C, C =< <<$9>> -> {ok, C, bump_ptr(Obj, 1)};
        {C, 1} -> {error, {miss, digit, C}};
        Err -> Err
    end.

alternative(_, #obj{ptr = eof}) -> {error, eof};
alternative(Fs, Obj) -> alternative(Fs, Obj, []).

sequence(_, #obj{ptr = eof}) -> {error, eof};
sequence(Fs, Obj) -> sequence(Fs, Obj, []).

repeat(Min, Max, F, Obj) -> repeat(0, Min, minus1(Max), F, Obj, []).

alternative([], _Obj, Es) -> {error, {fail, Es}};
alternative([F | Fs], Obj, Es) ->
    case F(Obj) of
        {ok, X, O} -> {ok, X, O};
        {error, E} -> alternative(Fs, Obj, [E | Es])
    end.

sequence([], Obj, Xs) -> {ok, lists:reverse(Xs), Obj};
sequence([F | Fs], Obj, Xs) ->
    case F(Obj) of
        {ok, X, O} -> sequence(Fs, O, [X | Xs]);
        {error, R} -> {error, {unexpected, R}}
    end.

repeat(N, Mn, Mx, F, Obj, Xs) ->
    case F(Obj) of
        {ok, X, O} when N =:= Mx -> {ok, lists:reverse([X | Xs]), O};
        {ok, X, O} -> repeat(N + 1, Mn, Mx, F, O, [X | Xs]);
        {error, R} when N < Mn -> {error, {too_few, R}};
        {error, _R} -> {ok, lists:reverse(Xs), Obj}
    end.

final(Bin, Obj) when is_binary(Bin) ->
    case peek_chars(Obj, byte_size(Bin)) of
        {Bin, Sz} -> {ok, Bin, bump_ptr(Obj, Sz)};
        E -> {error, {miss, E, Bin}}
    end.

bump_ptr(#obj{ptr = Ptr} = Obj, N) ->
    Obj#obj{ptr = Ptr + N}.

peek_chars(#obj{ptr = Ptr, sz = Sz}, Num) when Sz < Ptr + Num ->
    {error, eof};
peek_chars(#obj{bin = Bin, ptr = Ptr}, 2) ->
    case binary:part(Bin, {Ptr, 2}) of
        <<0:1, _:7, 0:1, _:7>> = B -> {B, 2};
        B -> error({unhandled_utf8, B})
    end;
peek_chars(#obj{bin = Bin, ptr = Ptr}, 1) ->
    case binary:part(Bin, {Ptr, 1}) of
        <<0:1, _:7>> = B -> {B, 1};
        <<6:3, _:5>> = B1 ->
            case binary:part(Bin, {Ptr+1, 1}) of
                <<2:2, _:6>> = B2 -> {<<B1/binary, B2/binary>>, 2};
                B2 -> error({unhandled_utf8, B1, B2})
            end;
        B0 -> error({unhandled_utf8, B0})
    end.

minus1(inf) -> inf;
minus1(I) -> I - 1.

squeeze(L) when is_list(L) ->
    binary:list_to_bin(L);
squeeze(X) ->
    X.

atomize(X) ->
    binary_to_atom(squeeze(X)).
