; RFC 5234. ABNF. Crocker & Overell. January 2008.

rulelist        =  1*( rule / (*c-wsp c-nl) )

; continues if next line starts with white space
rule            =  rulename defined-as elements c-nl ;; {rule, Y}

rulename        =  ALPHA *(ALPHA / DIGIT / "-")      ;; '[Y1|Y2]'

; basic rules definition and incremental alternatives
defined-as      =  *c-wsp ("=" / "=/") *c-wsp        ;; 'Y2'

elements        =  alternation *c-wsp                ;; Y1

c-wsp           =  WSP / (c-nl WSP)

; comment or newline
c-nl            =  construct / comment / CRLF

construct       =  2";" *(WSP / VCHAR) CRLF          ;; {construct, "Y2"}

comment         =  ";" *(WSP / VCHAR) CRLF           ;; {comment, "Y2"}

alternation     =  concatenation *ws-concat          ;; {alt, [Y1|Y2]}

ws-concat       =  *c-wsp "/" *c-wsp concatenation   ;; Y4

concatenation   =  repetition *ws-rep                ;; {seq, [Y1|Y2]}

ws-rep          =  1*c-wsp repetition                ;; Y2

repetition      =  [repeat] element                  ;; {rep, Y1, Y2}

repeat          =  rep-star / rep-dig

rep-star        =  [1*DIGIT] "*" [1*DIGIT]           ;; {!Y1 ? 0 : iY1, !Y3 ? inf : iY3}

rep-dig         =  1*DIGIT                           ;; {iY, iY}

element         =  appl / group / option / val

appl            =  rulename                          ;; {app, 'Y'}

group           =  "(" *c-wsp alternation *c-wsp ")" ;; Y3

option          =  "[" *c-wsp alternation *c-wsp "]" ;; {rep, {0, 1}, Y3}


; quoted string of SP and VCHAR without DQUOTE

val             =  char-val / num-val / prose-val

char-val        =  DQUOTE *(%x20-21 / %x23-7E) DQUOTE ;; "Y2"

num-val         =  "%" (bin-val / dec-val / hex-val)  ;; Y2

; series of concatenated bit values or single ONEOF range
bin-val         =  "b" 1*BIT [ bin-suffix ]           ;; {bin, !Y3 ? b#Y2 : {b#Y2, ^Y3}}

bin-suffix      =  1*bin-suffix-dot / bin-suffix-dash

bin-suffix-dot  =  "." 1*BIT                          ;; {dot, b#Y2}

bin-suffix-dash =  "-" 1*BIT                          ;; {dash, b#Y2}

dec-val         =  "d" 1*DIGIT [ dec-suffix ]         ;; {dec, !Y3 ? #Y2 : {#Y2, ^Y3}}

dec-suffix      =  1*dec-suffix-dot / dec-suffix-dash

dec-suffix-dot  =  "." 1*DIGIT                        ;; {dot, #Y2}

dec-suffix-dash =  "-" 1*DIGIT                        ;; {dash, #Y2}

hex-val         =  "x" 1*HEXDIG [ hex-suffix ]        ;; {hex, !Y3 ? x#Y2 : {x#Y2, ^Y3}}

hex-suffix      =  1*hex-suffix-dot / hex-suffix-dash

hex-suffix-dot  =  "." 1*HEXDIG                       ;; {dot, x#Y2}

hex-suffix-dash =  "-" 1*HEXDIG                       ;; {dash, x#Y2}

; bracketed string of SP and VCHAR without angles
; prose description, to be used as last resort
prose-val       =  "<" *(%x20-3D / %x3F-7E) ">"       ;; "Y2"
